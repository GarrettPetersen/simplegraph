import math

from .base import BaseGraph
from .utils import human_readable_number


class BubbleAndArrowGraph(BaseGraph):
    """
    The graphs generated by this class feature bubbles and arrows. The bubbles
    and arrows are sized based on the data provided. The bubbles are colored
    based on the legend labels provided. The arrows are colored based on the
    data provided.
    """

    def __init__(
        self,
        width=300,
        height=200,
        padding=20,
        x_padding=None,
        y_padding=None,
        y_top_padding=None,
        y_bottom_padding=None,
        x_left_padding=None,
        x_right_padding=None,
        colors=None,
        num_y_ticks=5,
        x_axis_label=None,
        primary_y_axis_label=None,
        secondary_y_axis_label=None,
        show_legend=True,
        rotate_x_labels=True,
    ):
        super().__init__(
            width=width,
            height=height,
            padding=padding,
            x_padding=x_padding,
            y_padding=y_padding,
            y_top_padding=y_top_padding,
            y_bottom_padding=y_bottom_padding,
            x_left_padding=x_left_padding,
            x_right_padding=x_right_padding,
            colors=colors,
            num_y_ticks=num_y_ticks,
            x_axis_label=x_axis_label,
            primary_y_axis_label=primary_y_axis_label,
            secondary_y_axis_label=secondary_y_axis_label,
            show_legend=show_legend,
            rotate_x_labels=rotate_x_labels,
        )
        self.bubbles = []
        self.arrows = []

    def add_bubble(
        self,
        size,
        text=None,
    ):
        self.bubbles.append((size, text))

    def add_arrow(
        self,
        origin,
        destination,
        size,
        text=None,
    ):
        self.arrows.append((origin, destination, size, text))

    def _draw_dot(self, x, y, fill, radius=5):
        return f'<circle cx="{x}" cy="{y}" r="{radius}" fill="{fill}" />'

    def _draw_arrow(self, x1, y1, x2, y2, fill="black", width=1):
        arrow_head_length = 5
        direction = math.atan2(y2 - y1, x2 - x1)
        perpendicular = direction + math.pi / 2
        x_offset = math.cos(perpendicular) * width / 2
        y_offset = math.sin(perpendicular) * width / 2
        x_arrow_head = x2 - math.cos(direction) * arrow_head_length
        y_arrow_head = y2 - math.sin(direction) * arrow_head_length
        # TODO: bezier curved arrows?
        return (
            f'<path d="M {x1+x_offset},{y1+y_offset} '
            + f"L{x_arrow_head + x_offset},{y_arrow_head + y_offset} "
            + f"L{x_arrow_head + 1.3 * x_offset},{y_arrow_head + 1.3 * y_offset} "
            + f"L{x2},{y2} L{x_arrow_head - 1.3 * x_offset},{y_arrow_head - 1.3 * y_offset} "
            + f"L{x_arrow_head - x_offset},{y_arrow_head - y_offset}"
            + f'L{x1-x_offset},{y1-y_offset} z"'  # Z closes the path
            + f'fill="{fill}" />'
        )

    def render(self):

        svg = f'<svg xmlns="http://www.w3.org/2000/svg" width="{self.width}" height="{self.height}">'

        # TODO: draw all the bubbles
        # Draw all the arrows
        # Curve the arrows so they go through the middle of the circle of bubbles
        svg += "</svg>"
        return svg
